# DO NOT EDIT. This file was automatically generated by generate_prose_mirror_classes.py.
from typing import List, Optional, Tuple, Union

from pydantic import BaseModel
from typing_extensions import Literal


# Common parent class for all Tiptap nodes
class TiptapNode(BaseModel):
    pass


BlockNode = Union[
    "BlockquoteNode",
    "BulletlistNode",
    "CodeblockNode",
    "HeadingNode",
    "HorizontalruleNode",
    "ImageNode",
    "OrderedlistNode",
    "ParagraphNode",
    "TableNode",
]
ListNode = Union["BulletlistNode", "OrderedlistNode"]
InlineNode = Union["HardbreakNode", "TextNode"]


class ParagraphNode(TiptapNode):
    type: Literal["paragraph"] = "paragraph"
    content: Optional[List["InlineNode"]]


class BlockquoteNode(TiptapNode):
    type: Literal["blockquote"] = "blockquote"
    content: List["BlockNode"]


class BulletlistNode(TiptapNode):
    type: Literal["bulletList"] = "bulletList"
    content: List["ListitemNode"]


class CodeblockNode(TiptapNode):
    type: Literal["codeBlock"] = "codeBlock"
    content: Optional[List["TextNode"]]

    class Attrs(BaseModel):
        language: Optional[Optional[str]] = None

    attrs: Optional[Attrs] = None


class DocNode(TiptapNode):
    type: Literal["doc"] = "doc"
    content: List["BlockNode"]


class HardbreakNode(TiptapNode):
    type: Literal["hardBreak"] = "hardBreak"


class HeadingNode(TiptapNode):
    type: Literal["heading"] = "heading"
    content: Optional[List["InlineNode"]]

    class Attrs(BaseModel):
        level: Optional[int] = 1

    attrs: Optional[Attrs] = None


class HorizontalruleNode(TiptapNode):
    type: Literal["horizontalRule"] = "horizontalRule"


class ListitemNode(TiptapNode):
    type: Literal["listItem"] = "listItem"
    content: Tuple["ParagraphNode", Optional[List["BlockNode"]]]


class OrderedlistNode(TiptapNode):
    type: Literal["orderedList"] = "orderedList"
    content: List["ListitemNode"]

    class Attrs(BaseModel):
        start: Optional[int] = 1
        type: Optional[Optional[str]] = None

    attrs: Optional[Attrs] = None


class TextNode(TiptapNode):
    type: Literal["text"] = "text"
    text: str


class ImageNode(TiptapNode):
    type: Literal["image"] = "image"

    class Attrs(BaseModel):
        src: Optional[Optional[str]] = None
        alt: Optional[Optional[str]] = None
        title: Optional[Optional[str]] = None

    attrs: Optional[Attrs] = None


class TableNode(TiptapNode):
    type: Literal["table"] = "table"
    content: List["TablerowNode"]


class TablerowNode(TiptapNode):
    type: Literal["tableRow"] = "tableRow"
    content: Optional[List[Union["TablecellNode", "TableheaderNode"]]]


class TablecellNode(TiptapNode):
    type: Literal["tableCell"] = "tableCell"
    content: List["BlockNode"]

    class Attrs(BaseModel):
        colspan: Optional[int] = 1
        rowspan: Optional[int] = 1
        colwidth: Optional[Optional[str]] = None

    attrs: Optional[Attrs] = None


class TableheaderNode(TiptapNode):
    type: Literal["tableHeader"] = "tableHeader"
    content: List["BlockNode"]

    class Attrs(BaseModel):
        colspan: Optional[int] = 1
        rowspan: Optional[int] = 1
        colwidth: Optional[Optional[str]] = None

    attrs: Optional[Attrs] = None
